{"version":3,"sources":["components/Header.js","components/Search.js","components/Weather.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","Search","onSubmit","getWeather","type","name","placeholder","Weather","city","country","description","temperature","Math","round","humidity","error","Footer","info","apiKey","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","apiCall","json","data","cod","setState","sys","main","temp","weather","Helmet","this","content","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wRAQeA,EANA,SAAAC,GAAK,OAClB,4BAAQC,UAAU,UACd,wBAAIA,UAAU,iBAAiBD,EAAME,SCM5BC,EARA,SAAAH,GAAK,OAClB,0BAAMC,UAAU,OAAOG,SAAUJ,EAAMK,YACrC,2BAAOJ,UAAU,cAAcK,KAAK,OAAOC,KAAK,OAAOC,YAAY,YACnE,2BAAOP,UAAU,cAAcK,KAAK,OAAOC,KAAK,UAAUC,YAAY,eACtE,4BAAQP,UAAU,gBAAlB,mBCMWQ,EAVC,SAAAT,GAAK,OACnB,yBAAKC,UAAWD,EAAMU,MAAQV,EAAMW,QAAU,wBAA0B,WACpEX,EAAMU,MAAQV,EAAMW,SAAW,4BAAKX,EAAMU,KAAX,KAAmBV,EAAMW,QAAzB,KAC/BX,EAAMY,aAAe,uBAAGX,UAAU,iBAAiBD,EAAMY,aACzDZ,EAAMa,aAAe,uBAAGZ,UAAU,iBAAb,gBAA0C,gCAASa,KAAKC,MAAMf,EAAMa,YAAc,QAAxC,YAC/Db,EAAMgB,UAAY,uBAAGf,UAAU,iBAAb,aAAuC,gCAASD,EAAMgB,SAAf,OACzDhB,EAAMiB,OAAS,uBAAGhB,UAAU,kBAAkBD,EAAMiB,SCA3CC,EANA,SAAAlB,GAAK,OAClB,4BAAQC,UAAU,UAChB,uBAAGA,UAAU,gBAAgBD,EAAMmB,Q,OCGjCC,EAAS,mCA4EAC,E,4MAzEbC,MAAQ,CACNpB,MAAO,uDACPW,iBAAaU,EACbb,UAAMa,EACNZ,aAASY,EACTP,cAAUO,EACVX,iBAAaW,EACbN,WAAOM,G,EAGTlB,W,uCAAa,WAAOmB,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIf,EAAUa,EAAEG,OAAOC,SAASjB,QAAQkB,MACpCnB,EAAOc,EAAEG,OAAOC,SAASlB,KAAKmB,MAHzB,SAIWC,MAAM,qDAAD,OAAsDpB,EAAtD,YAA8DC,EAA9D,kBAA+ES,IAJ/F,cAILW,EAJK,gBAKQA,EAAQC,OALhB,OAKLC,EALK,OAMRvB,GAAQC,EACO,QAAbsB,EAAKC,IACN,EAAKC,SAAS,CACZjC,MAAO,uDACPW,iBAAaU,EACbb,UAAMa,EACNZ,aAASY,EACTP,cAAUO,EACVX,iBAAaW,EACbN,MAAO,mBAGT,EAAKkB,SAAS,CACZjC,MAAM,cAAD,OAAgB+B,EAAK1B,KAArB,aAA8B0B,EAAKG,IAAIzB,QAAvC,yBACLE,YAAaoB,EAAKI,KAAKC,KACvB5B,KAAMuB,EAAK1B,KACXI,QAASsB,EAAKG,IAAIzB,QAClBK,SAAUiB,EAAKI,KAAKrB,SACpBJ,YAAaqB,EAAKM,QAAQ,GAAG3B,YAC7BK,WAAOM,IAIX,EAAKY,SAAS,CACZjC,MAAO,uDACPW,iBAAaU,EACbb,UAAMa,EACNZ,aAASY,EACTP,cAAUO,EACVX,iBAAaW,EACbN,MAAO,2BApCA,4C,6GAyCX,OACE,yBAAKhB,UAAU,OACb,kBAACuC,EAAA,EAAD,gDACE,+BAAQC,KAAKnB,MAAMpB,OACnB,0BAAMK,KAAK,cAAcmC,QAAQ,+KAFnC,oCAIA,kBAAC,EAAD,CAAQxC,MAAM,uBACd,kBAAC,EAAD,CAAQG,WAAYoC,KAAKpC,aACzB,kBAAC,EAAD,CACEQ,YAAa4B,KAAKnB,MAAMT,YACxBH,KAAM+B,KAAKnB,MAAMZ,KACjBC,QAAS8B,KAAKnB,MAAMX,QACpBK,SAAUyB,KAAKnB,MAAMN,SACrBJ,YAAa6B,KAAKnB,MAAMV,YACxBK,MAAOwB,KAAKnB,MAAML,QAEpB,kBAAC,EAAD,CAAQE,KAAK,8C,GApEHwB,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.27c727ae.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = props => (\n  <header className=\"header\">\n      <h1 className=\"header__title\">{props.title}</h1>\n  </header>\n);\n\nexport default Header; ","import React from 'react';\n\nconst Search = props => (\n  <form className=\"form\" onSubmit={props.getWeather}>\n    <input className=\"form__input\" type=\"text\" name=\"city\" placeholder=\"city...\"/>\n    <input className=\"form__input\" type=\"text\" name=\"country\" placeholder=\"country...\"/>\n    <button className=\"form__submit\">Check weather</button>\n  </form>\n);\n\nexport default Search; ","import React from 'react';\n\nconst Weather = props => (\n  <div className={props.city && props.country ? \"results results--grey\" : \"results\"}>\n    { props.city && props.country && <h2>{props.city}, {props.country} </h2> }\n    { props.description && <p className=\"results__data\">{props.description}</p> }\n    { props.temperature && <p className=\"results__data\">Temperature: <strong>{Math.round(props.temperature - 273.15)} &#8451;</strong></p> }\n    { props.humidity && <p className=\"results__data\">Humidity: <strong>{props.humidity} %</strong></p> }\n    { props.error && <p className=\"results__error\">{props.error}</p> }\n  </div>\n);\n\nexport default Weather; \n","import React from 'react';\n\nconst Footer = props => (\n  <footer className=\"footer\">\n    <p className=\"footer__info\">{props.info}</p>\n  </footer>\n);\n\nexport default Footer; ","import React from 'react';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Weather from './components/Weather';\nimport Footer from './components/Footer';\nimport Helmet from 'react-helmet';\n\nconst apiKey = \"9e2f1c9dcba6b906904ed1c166a94535\";\n\nclass App extends React.Component {\n  state = {\n    title: 'Basic information about weather | The weather finder',\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n    const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${apiKey}`);\n    const data = await apiCall.json();\n    if(city && country) {\n      if(data.cod === \"404\") {\n        this.setState({\n          title: 'Basic information about weather | The weather finder',\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: 'City not found'\n        });\n      } else {\n        this.setState({\n          title: `Weather in ${data.name}, ${data.sys.country} | The weather finder`,\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: undefined\n        }); \n      }\n    } else {\n      this.setState({\n        title: 'Basic information about weather | The weather finder',\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please fill out fields'\n      });\n    }\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <Helmet>\n          <title>{this.state.title}</title>\n          <meta name=\"description\" content=\"Find the basic information about weather with The Weather Finder. Check temperature, humidity and weather description in your city &#9728;&#9729;\" />\n        </Helmet>\n        <Header title=\"The weather finder\"/>\n        <Search getWeather={this.getWeather}/>\n        <Weather\n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error}\n        />\n        <Footer info=\"Designed & created by Karolina Guzik\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}